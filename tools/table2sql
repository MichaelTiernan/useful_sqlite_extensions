#!/usr/bin/env perl
# -*- perl -*-

# Bare bones tool to convert a table like
#
# HEADER2 | HEADER2
# --------|--------
# VALUE1  | VALUE2
#
# to sqlite3-dialect SQL DDL statements.

# Copyright 2019 Shawn Wagner <shawnw.mobile@gmail.com>

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


use warnings;
use strict;
use feature qw/say/;
use Regexp::Common qw/number/;
use Getopt::Long;
use Pod::Usage;

my $temp_table = 0;
my $help = 0;
GetOptions('t' => \$temp_table,
           'help' => \$help);
pod2usage(1) if $help;

my $strip_pipes = qr/(?:^\s*\|\s*) # Leading pipe and whitespace
                   |
                     (?:\s*\|\s*$) # Trailing pipe and whitespace
                    /x;
my $pipes = qr/\s*\|\s*/;
$" = ',';

my $table = shift // 'mytable';
$table =~ s/"/""/g;
$table = qq{"$table"};
$table = "temp.$table" if $temp_table;

my $header = <>;
chomp $header;
$header =~ s/$strip_pipes//g;
my @columns = map { s/"/""/g; qq/"$_"/ } split /$pipes/, $header;

say "BEGIN TRANSACTION;";
say "CREATE TABLE IF NOT EXISTS $table(@columns);";

while (<>) {
  chomp;
  next if /^\s*[-+|_]+\s*$/;     # Skip separator lines
  s/$strip_pipes//g;
  my @values = map { /^$RE{num}{real}$/ ? $_ : do { s/'/''/g; qq{'$_'} } }
    split /$pipes/;
  say "INSERT INTO $table VALUES (@values);";
}
say "COMMIT;";

__END__

=head1 NAME

table2sql Convert an ASCII art table to SQLite 

=head1 SYNOPSIS

table2sql [OPTIONS] [TABLE NAME] [TABLE FILE]

=head1 OPTIONS

=over 4

=item B<-t>

Create a temporary table.

=item B<--help>

Display help.

=back

=head1 DESCRIPTION

Given an ASCII art table where columns are separated by pipe
characters (C<|>), generate SQLite flavor C<CREATE TABLE> and C<INSERT
INTO> statements to recreate it in a database. The first line of input
must be a header with column names.

Reads from standard input if no filename is given.

Outputs to standard output.

=cut
